@page "/apontamento"

@using MeuPonto_Blazor.Data
@using MeuPonto_Blazor;
@inject MainService MainService
@inject ApontamentoService ApontamentoService
@inject NavigationManager NavManager

<h1>Apontamento</h1>
<p>Marque abaixo o apontamento de horas conforme periodo selecionado.</p>

<select class="form-control selectpicker" @bind="MainService.SelectedPeriodo.Referencia" ontimeupdate="@UpdateApontamento();">
    <option>Selecione um valor</option>
    @foreach (var item in MainService.GetEmpresa().Periodos)
    {
        <option value="@item.Referencia">@item.Descricao</option>
    }
</select>

@if (apontamentos != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Data</th>
                <th>Marcacoes</th>
                <th>Status</th>
                <th>Observacoes</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var apontamento in apontamentos)
            {
                <tr>
                    <td>@apontamento.Date.ToShortDateString()</td>
                    <td>@apontamento.GetMarcacoes()</td>
                    <td>@apontamento.GetJornada().ToString()</td>
                    <td>@apontamento.Observacao</td>
                    <td><button class="btn btn-primary" @onclick="() => RedirectMarcacao(apontamento)">Editar</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Ponto[] apontamentos;

    protected override async Task OnInitializedAsync()
    {
        await UpdateApontamento();
    }
    public async Task UpdateApontamento()
    {
        if (MainService.SelectedPeriodo.Referencia != DateTime.MinValue)
        {
            apontamentos = await ApontamentoService.GetApontamentos(MainService.GetEmpresa().Funcionarios.First(), MainService.SelectedPeriodo);
        }
    }
    private void RedirectMarcacao(Ponto selectedPonto)
    {
        MainService.SelectedPonto = selectedPonto;
        NavManager.NavigateTo("/marcacao");
    }
}