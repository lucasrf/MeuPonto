@page "/apontamento"

@using MeuPonto_Blazor.Data
@using MeuPonto;
@inject EmpresaService EmpresaService
@inject ApontamentoService ApontamentoService
@inject NavigationManager NavManager

<h1>Apontamento</h1>

<p>Marque abaixo o apontamento de horas conforme periodo selecionado.</p>

@if (apontamentos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <select class="form-control selectpicker" @bind="EmpresaService.SelectedPeriodo.Referencia" ontimeupdate="@UpdateApontamento();">
        <option>Selecione um valor</option>
        @foreach (var item in EmpresaService.GetEmpresa().Periodos)
        {
            <option value="@item.Referencia">@item.Descricao</option>
        }
    </select>

    <table class="table">
        <thead>
            <tr>
                <th>Data</th>
                <th>Marcacoes</th>
                <th>Status</th>
                <th>Observacoes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var apontamento in apontamentos)
            {
                <tr>
                    <td>@apontamento.Date</td>
                    <td>@apontamento.Marcacao</td>
                    <td>@apontamento.Jornada</td>
                    <td>@apontamento.Observacao</td>
                    <td>
                        <button class="btn btn-primary" onclick="@RedirectMarcacao()" style="width:80px;">
                            Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PontoExibicao[] apontamentos;

    protected override async Task OnInitializedAsync()
    {
        await UpdateApontamento();
    }

    private async Task RedirectMarcacao()
    {
        NavManager.NavigateTo("/marcacao");
    }

    public async Task UpdateApontamento()
    {
        apontamentos = await ApontamentoService.GetApontamentos(EmpresaService.GetEmpresa().Funcionarios.First(), EmpresaService.SelectedPeriodo);
    }
}
